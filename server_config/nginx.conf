	server {
		listen   80;
		server_name  www.miketigas.com miketigas.com www.mike.tig.as;
		rewrite ^/(.*) http://mike.tig.as/$1 permanent;
	}
	server {
		listen   80;
		server_name tig.as;
		rewrite ^/(.*) http://mike.tig.as/$1 redirect;
	}

	server {
		listen 80;
		server_name mike.tig.as;
		gzip on;
		
		# =========== Redirects ============
		# I apologize for how excessively large this is. I've broken the
		# cardinal rule of permanent URLs serveral times.

		# Redirect from / to /blog/  is handled in Django, but if we handle it
		# here, we save on having to call the Apache/Django instance.
		rewrite ^/$ /blog/ redirect;
		
		# See SSL on the alternate server config, below
		location /__mtadmin_/ {
			rewrite ^(/__mtadmin_/.*) https://mike.tig.as$1 permanent;
		}

		# Most of the following are usually related to old URL structures
		# I had.
		rewrite ^/200([5-9])/(.*)$ /blog/200$1/$2 permanent;
		rewrite ^/oldblog/(.*)$ /blog/$1 permanent;

		if ($http_user_agent !~* (FeedBurner|GoogleBot)) {
			rewrite ^/feeds/blog/$ http://feeds.feedburner.com/mtigas permanent;
		}
		rewrite ^/feed/ /feeds/blog/ permanent;
		rewrite ^/feeds/rss/$ /feeds/blog/ permanent;
		rewrite ^/feeds/blog/rss/$ /feeds/blog/ permanent;
		rewrite ^/feeds/atom/$ /feeds/blog/ permanent;
		rewrite ^/feeds/blog/atom/$ /feeds/blog/ permanent;

		rewrite ^/web-dev/$ /portfolio/ permanent;
		rewrite ^/work/$ /portfolio/ permanent;
		rewrite ^/about/colophon/$ /colophon/ permanent;

		rewrite ^/blog/photography/$ http://www.flickr.com/photos/madmannova/ redirect;
		rewrite ^/photography/$ http://www.flickr.com/photos/madmannova/ redirect;
		rewrite ^/photo/ http://www.flickr.com/photos/madmannova/ redirect;
		rewrite ^/blog/photo/ http://www.flickr.com/photos/madmannova/ redirect;
		
		# =========== Standard server config ============
		root /home/mtigas/mt2/;
		allow all;
		location / {
			# If the request is not sent via GET (say, it has some POST data)
			# go straight to Apache and don't bother with caches.
			if ($request_method != GET) {
				proxy_pass http://127.0.0.1:82;
				break;
			}
			default_type text/html;
			
			# See server/cacheutil/middleware.py.
			set $memcached_key "NGINX_mt2:$uri$is_args$args";
			memcached_pass 127.0.0.1:11211;
			error_page 404 502 = @cache_miss;
		}
		location @cache_miss {
			# Just another reference to the Apache/Django instance.
			proxy_pass http://127.0.0.1:82;
		}
		location /static/ {
			alias /home/mtigas/mt2/static/;
			allow all;
			autoindex on;
			expires 2d;
		}
		location /admin_media/ {
			alias /home/mtigas/mt2/third_party/django/contrib/admin/media/;
			allow all;
			autoindex on;
		}
	}
	server {
		# I provide private SSL access to my site, not for authentication purposes
		# as much as preventing eavesdropping (for example, when I'm working in a
		# place with unsecured wireless.
		#
		# I get my certificates from http://www.cacert.org/
		
		listen 443;
		server_name mike.tig.as;
		gzip on;

		# =========== SSL-specific config ============
		ssl on;
		ssl_certificate /home/mtigas/ssl_data/cert-mike.tig.as.crt;
		ssl_certificate_key /home/mtigas/ssl_data/private-nopass.key;
		
		# Allowing only TLS + AES256 blocks out IE6 (and maybe more) on WinXP or earlier.
		ssl_protocols TLSv1;
		ssl_ciphers DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:AES256-SHA;
		
		ssl_session_timeout 1m;
		auth_basic "[SECURE AREA]";
		auth_basic_user_file /home/mtigas/ssl_data/2.mike.tig.as.htpasswd;

		# Let Django know about the HTTPS connection. (See server/minutiae/middleware.py.)
		proxy_set_header X-Forwarded-Protocol https;
		
		# =========== Standard server config ============
		root /home/mtigas/mt2/;
		allow all;
		location / {
			proxy_pass http://127.0.0.1:82;
		}
		location /static/ {
			alias /home/mtigas/mt2/static/;
			allow all;
			autoindex on;
		}
		location /admin_media/ {
			alias /home/mtigas/mt2/third_party/django/contrib/admin/media/;
			allow all;
			autoindex on;
		}
	}